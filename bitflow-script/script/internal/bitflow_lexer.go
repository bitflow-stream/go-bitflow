// Code generated from Bitflow.g4 by ANTLR 4.7.1. DO NOT EDIT.

package parser

import (
	"fmt"
	"unicode"

	"github.com/antlr/antlr4/runtime/Go/antlr"
)

// Suppress unused import error
var _ = fmt.Printf
var _ = unicode.IsLetter

var serializedLexerAtn = []uint16{
	3, 24715, 42794, 33075, 47597, 16764, 15335, 30598, 22884, 2, 23, 192,
	8, 1, 4, 2, 9, 2, 4, 3, 9, 3, 4, 4, 9, 4, 4, 5, 9, 5, 4, 6, 9, 6, 4, 7,
	9, 7, 4, 8, 9, 8, 4, 9, 9, 9, 4, 10, 9, 10, 4, 11, 9, 11, 4, 12, 9, 12,
	4, 13, 9, 13, 4, 14, 9, 14, 4, 15, 9, 15, 4, 16, 9, 16, 4, 17, 9, 17, 4,
	18, 9, 18, 4, 19, 9, 19, 4, 20, 9, 20, 4, 21, 9, 21, 4, 22, 9, 22, 4, 23,
	9, 23, 4, 24, 9, 24, 4, 25, 9, 25, 4, 26, 9, 26, 4, 27, 9, 27, 3, 2, 3,
	2, 3, 3, 3, 3, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 5, 3, 5, 3,
	6, 3, 6, 3, 7, 3, 7, 3, 8, 3, 8, 3, 9, 3, 9, 3, 10, 3, 10, 3, 11, 3, 11,
	3, 12, 3, 12, 3, 13, 3, 13, 3, 14, 3, 14, 3, 15, 3, 15, 3, 16, 3, 16, 3,
	16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 5, 16, 97, 10, 16, 3, 17, 3, 17,
	3, 18, 3, 18, 3, 18, 3, 19, 3, 19, 3, 19, 3, 19, 3, 19, 3, 19, 3, 19, 3,
	19, 5, 19, 112, 10, 19, 3, 20, 3, 20, 7, 20, 116, 10, 20, 12, 20, 14, 20,
	119, 11, 20, 3, 20, 3, 20, 3, 21, 6, 21, 124, 10, 21, 13, 21, 14, 21, 125,
	3, 22, 7, 22, 129, 10, 22, 12, 22, 14, 22, 132, 11, 22, 3, 22, 3, 22, 3,
	22, 7, 22, 137, 10, 22, 12, 22, 14, 22, 140, 11, 22, 3, 22, 3, 22, 3, 22,
	3, 22, 5, 22, 146, 10, 22, 3, 23, 3, 23, 3, 23, 3, 23, 7, 23, 152, 10,
	23, 12, 23, 14, 23, 155, 11, 23, 3, 23, 5, 23, 158, 10, 23, 3, 23, 3, 23,
	3, 23, 3, 23, 3, 24, 3, 24, 3, 24, 3, 24, 7, 24, 168, 10, 24, 12, 24, 14,
	24, 171, 11, 24, 3, 24, 3, 24, 3, 24, 3, 24, 3, 24, 3, 25, 3, 25, 3, 25,
	3, 25, 3, 26, 3, 26, 3, 26, 5, 26, 185, 10, 26, 3, 26, 3, 26, 3, 27, 3,
	27, 3, 27, 3, 27, 4, 117, 169, 2, 28, 3, 3, 5, 4, 7, 5, 9, 6, 11, 7, 13,
	8, 15, 9, 17, 10, 19, 11, 21, 2, 23, 2, 25, 2, 27, 2, 29, 2, 31, 12, 33,
	13, 35, 14, 37, 15, 39, 16, 41, 17, 43, 18, 45, 19, 47, 20, 49, 21, 51,
	22, 53, 23, 3, 2, 8, 7, 2, 47, 60, 67, 92, 94, 94, 97, 97, 99, 124, 8,
	2, 48, 48, 50, 60, 67, 92, 94, 94, 97, 97, 99, 124, 4, 2, 72, 72, 104,
	104, 4, 2, 75, 75, 107, 107, 3, 2, 50, 59, 4, 2, 12, 12, 15, 15, 2, 198,
	2, 3, 3, 2, 2, 2, 2, 5, 3, 2, 2, 2, 2, 7, 3, 2, 2, 2, 2, 9, 3, 2, 2, 2,
	2, 11, 3, 2, 2, 2, 2, 13, 3, 2, 2, 2, 2, 15, 3, 2, 2, 2, 2, 17, 3, 2, 2,
	2, 2, 19, 3, 2, 2, 2, 2, 31, 3, 2, 2, 2, 2, 33, 3, 2, 2, 2, 2, 35, 3, 2,
	2, 2, 2, 37, 3, 2, 2, 2, 2, 39, 3, 2, 2, 2, 2, 41, 3, 2, 2, 2, 2, 43, 3,
	2, 2, 2, 2, 45, 3, 2, 2, 2, 2, 47, 3, 2, 2, 2, 2, 49, 3, 2, 2, 2, 2, 51,
	3, 2, 2, 2, 2, 53, 3, 2, 2, 2, 3, 55, 3, 2, 2, 2, 5, 57, 3, 2, 2, 2, 7,
	59, 3, 2, 2, 2, 9, 66, 3, 2, 2, 2, 11, 68, 3, 2, 2, 2, 13, 70, 3, 2, 2,
	2, 15, 72, 3, 2, 2, 2, 17, 74, 3, 2, 2, 2, 19, 76, 3, 2, 2, 2, 21, 78,
	3, 2, 2, 2, 23, 80, 3, 2, 2, 2, 25, 82, 3, 2, 2, 2, 27, 84, 3, 2, 2, 2,
	29, 86, 3, 2, 2, 2, 31, 96, 3, 2, 2, 2, 33, 98, 3, 2, 2, 2, 35, 100, 3,
	2, 2, 2, 37, 111, 3, 2, 2, 2, 39, 113, 3, 2, 2, 2, 41, 123, 3, 2, 2, 2,
	43, 145, 3, 2, 2, 2, 45, 147, 3, 2, 2, 2, 47, 163, 3, 2, 2, 2, 49, 177,
	3, 2, 2, 2, 51, 184, 3, 2, 2, 2, 53, 188, 3, 2, 2, 2, 55, 56, 7, 125, 2,
	2, 56, 4, 3, 2, 2, 2, 57, 58, 7, 127, 2, 2, 58, 6, 3, 2, 2, 2, 59, 60,
	7, 121, 2, 2, 60, 61, 7, 107, 2, 2, 61, 62, 7, 112, 2, 2, 62, 63, 7, 102,
	2, 2, 63, 64, 7, 113, 2, 2, 64, 65, 7, 121, 2, 2, 65, 8, 3, 2, 2, 2, 66,
	67, 7, 63, 2, 2, 67, 10, 3, 2, 2, 2, 68, 69, 7, 42, 2, 2, 69, 12, 3, 2,
	2, 2, 70, 71, 7, 46, 2, 2, 71, 14, 3, 2, 2, 2, 72, 73, 7, 43, 2, 2, 73,
	16, 3, 2, 2, 2, 74, 75, 7, 93, 2, 2, 75, 18, 3, 2, 2, 2, 76, 77, 7, 95,
	2, 2, 77, 20, 3, 2, 2, 2, 78, 79, 9, 2, 2, 2, 79, 22, 3, 2, 2, 2, 80, 81,
	9, 3, 2, 2, 81, 24, 3, 2, 2, 2, 82, 83, 9, 4, 2, 2, 83, 26, 3, 2, 2, 2,
	84, 85, 9, 5, 2, 2, 85, 28, 3, 2, 2, 2, 86, 87, 7, 47, 2, 2, 87, 30, 3,
	2, 2, 2, 88, 89, 7, 101, 2, 2, 89, 90, 7, 99, 2, 2, 90, 91, 7, 117, 2,
	2, 91, 97, 7, 103, 2, 2, 92, 93, 7, 69, 2, 2, 93, 94, 7, 67, 2, 2, 94,
	95, 7, 85, 2, 2, 95, 97, 7, 71, 2, 2, 96, 88, 3, 2, 2, 2, 96, 92, 3, 2,
	2, 2, 97, 32, 3, 2, 2, 2, 98, 99, 7, 61, 2, 2, 99, 34, 3, 2, 2, 2, 100,
	101, 7, 47, 2, 2, 101, 102, 7, 64, 2, 2, 102, 36, 3, 2, 2, 2, 103, 104,
	7, 36, 2, 2, 104, 105, 5, 43, 22, 2, 105, 106, 7, 36, 2, 2, 106, 107, 7,
	60, 2, 2, 107, 112, 3, 2, 2, 2, 108, 109, 5, 43, 22, 2, 109, 110, 7, 60,
	2, 2, 110, 112, 3, 2, 2, 2, 111, 103, 3, 2, 2, 2, 111, 108, 3, 2, 2, 2,
	112, 38, 3, 2, 2, 2, 113, 117, 7, 36, 2, 2, 114, 116, 11, 2, 2, 2, 115,
	114, 3, 2, 2, 2, 116, 119, 3, 2, 2, 2, 117, 118, 3, 2, 2, 2, 117, 115,
	3, 2, 2, 2, 118, 120, 3, 2, 2, 2, 119, 117, 3, 2, 2, 2, 120, 121, 7, 36,
	2, 2, 121, 40, 3, 2, 2, 2, 122, 124, 9, 6, 2, 2, 123, 122, 3, 2, 2, 2,
	124, 125, 3, 2, 2, 2, 125, 123, 3, 2, 2, 2, 125, 126, 3, 2, 2, 2, 126,
	42, 3, 2, 2, 2, 127, 129, 5, 21, 11, 2, 128, 127, 3, 2, 2, 2, 129, 132,
	3, 2, 2, 2, 130, 128, 3, 2, 2, 2, 130, 131, 3, 2, 2, 2, 131, 133, 3, 2,
	2, 2, 132, 130, 3, 2, 2, 2, 133, 146, 5, 23, 12, 2, 134, 138, 7, 36, 2,
	2, 135, 137, 5, 21, 11, 2, 136, 135, 3, 2, 2, 2, 137, 140, 3, 2, 2, 2,
	138, 136, 3, 2, 2, 2, 138, 139, 3, 2, 2, 2, 139, 141, 3, 2, 2, 2, 140,
	138, 3, 2, 2, 2, 141, 142, 5, 23, 12, 2, 142, 143, 7, 36, 2, 2, 143, 146,
	3, 2, 2, 2, 144, 146, 5, 29, 15, 2, 145, 130, 3, 2, 2, 2, 145, 134, 3,
	2, 2, 2, 145, 144, 3, 2, 2, 2, 146, 44, 3, 2, 2, 2, 147, 148, 7, 49, 2,
	2, 148, 149, 7, 49, 2, 2, 149, 153, 3, 2, 2, 2, 150, 152, 10, 7, 2, 2,
	151, 150, 3, 2, 2, 2, 152, 155, 3, 2, 2, 2, 153, 151, 3, 2, 2, 2, 153,
	154, 3, 2, 2, 2, 154, 157, 3, 2, 2, 2, 155, 153, 3, 2, 2, 2, 156, 158,
	7, 15, 2, 2, 157, 156, 3, 2, 2, 2, 157, 158, 3, 2, 2, 2, 158, 159, 3, 2,
	2, 2, 159, 160, 5, 49, 25, 2, 160, 161, 3, 2, 2, 2, 161, 162, 8, 23, 2,
	2, 162, 46, 3, 2, 2, 2, 163, 164, 7, 49, 2, 2, 164, 165, 7, 44, 2, 2, 165,
	169, 3, 2, 2, 2, 166, 168, 11, 2, 2, 2, 167, 166, 3, 2, 2, 2, 168, 171,
	3, 2, 2, 2, 169, 170, 3, 2, 2, 2, 169, 167, 3, 2, 2, 2, 170, 172, 3, 2,
	2, 2, 171, 169, 3, 2, 2, 2, 172, 173, 7, 44, 2, 2, 173, 174, 7, 49, 2,
	2, 174, 175, 3, 2, 2, 2, 175, 176, 8, 24, 2, 2, 176, 48, 3, 2, 2, 2, 177,
	178, 9, 7, 2, 2, 178, 179, 3, 2, 2, 2, 179, 180, 8, 25, 2, 2, 180, 50,
	3, 2, 2, 2, 181, 185, 7, 34, 2, 2, 182, 183, 7, 94, 2, 2, 183, 185, 7,
	117, 2, 2, 184, 181, 3, 2, 2, 2, 184, 182, 3, 2, 2, 2, 185, 186, 3, 2,
	2, 2, 186, 187, 8, 26, 2, 2, 187, 52, 3, 2, 2, 2, 188, 189, 7, 11, 2, 2,
	189, 190, 3, 2, 2, 2, 190, 191, 8, 27, 2, 2, 191, 54, 3, 2, 2, 2, 14, 2,
	96, 111, 117, 125, 130, 138, 145, 153, 157, 169, 184, 3, 8, 2, 2,
}

var lexerDeserializer = antlr.NewATNDeserializer(nil)
var lexerAtn = lexerDeserializer.DeserializeFromUInt16(serializedLexerAtn)

var lexerChannelNames = []string{
	"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
}

var lexerModeNames = []string{
	"DEFAULT_MODE",
}

var lexerLiteralNames = []string{
	"", "'{'", "'}'", "'window'", "'='", "'('", "','", "')'", "'['", "']'",
	"", "';'", "'->'", "", "", "", "", "", "", "", "", "'\t'",
}

var lexerSymbolicNames = []string{
	"", "", "", "", "", "", "", "", "", "", "CASE", "EOP", "PIPE", "PIPE_NAME",
	"STRING", "NUMBER", "NAME", "COMMENT", "MULTILINE_COMMENT", "NEWLINE",
	"WHITESPACE", "TAB",
}

var lexerRuleNames = []string{
	"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8",
	"LETTER", "LETTER_WITHOUT_DASH", "F", "I", "SINGLE_DASH", "CASE", "EOP",
	"PIPE", "PIPE_NAME", "STRING", "NUMBER", "NAME", "COMMENT", "MULTILINE_COMMENT",
	"NEWLINE", "WHITESPACE", "TAB",
}

type BitflowLexer struct {
	*antlr.BaseLexer
	channelNames []string
	modeNames    []string
	// TODO: EOF string
}

var lexerDecisionToDFA = make([]*antlr.DFA, len(lexerAtn.DecisionToState))

func init() {
	for index, ds := range lexerAtn.DecisionToState {
		lexerDecisionToDFA[index] = antlr.NewDFA(ds, index)
	}
}

func NewBitflowLexer(input antlr.CharStream) *BitflowLexer {

	l := new(BitflowLexer)

	l.BaseLexer = antlr.NewBaseLexer(input)
	l.Interpreter = antlr.NewLexerATNSimulator(l, lexerAtn, lexerDecisionToDFA, antlr.NewPredictionContextCache())

	l.channelNames = lexerChannelNames
	l.modeNames = lexerModeNames
	l.RuleNames = lexerRuleNames
	l.LiteralNames = lexerLiteralNames
	l.SymbolicNames = lexerSymbolicNames
	l.GrammarFileName = "Bitflow.g4"
	// TODO: l.EOF = antlr.TokenEOF

	return l
}

// BitflowLexer tokens.
const (
	BitflowLexerT__0              = 1
	BitflowLexerT__1              = 2
	BitflowLexerT__2              = 3
	BitflowLexerT__3              = 4
	BitflowLexerT__4              = 5
	BitflowLexerT__5              = 6
	BitflowLexerT__6              = 7
	BitflowLexerT__7              = 8
	BitflowLexerT__8              = 9
	BitflowLexerCASE              = 10
	BitflowLexerEOP               = 11
	BitflowLexerPIPE              = 12
	BitflowLexerPIPE_NAME         = 13
	BitflowLexerSTRING            = 14
	BitflowLexerNUMBER            = 15
	BitflowLexerNAME              = 16
	BitflowLexerCOMMENT           = 17
	BitflowLexerMULTILINE_COMMENT = 18
	BitflowLexerNEWLINE           = 19
	BitflowLexerWHITESPACE        = 20
	BitflowLexerTAB               = 21
)
