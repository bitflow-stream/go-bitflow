// Code generated from Bitflow.g4 by ANTLR 4.7.1. DO NOT EDIT.

package parser

import (
	"fmt"
	"unicode"

	"github.com/antlr/antlr4/runtime/Go/antlr"
)

// Suppress unused import error
var _ = fmt.Printf
var _ = unicode.IsLetter

var serializedLexerAtn = []uint16{
	3, 24715, 42794, 33075, 47597, 16764, 15335, 30598, 22884, 2, 21, 162,
	8, 1, 4, 2, 9, 2, 4, 3, 9, 3, 4, 4, 9, 4, 4, 5, 9, 5, 4, 6, 9, 6, 4, 7,
	9, 7, 4, 8, 9, 8, 4, 9, 9, 9, 4, 10, 9, 10, 4, 11, 9, 11, 4, 12, 9, 12,
	4, 13, 9, 13, 4, 14, 9, 14, 4, 15, 9, 15, 4, 16, 9, 16, 4, 17, 9, 17, 4,
	18, 9, 18, 4, 19, 9, 19, 4, 20, 9, 20, 3, 2, 3, 2, 3, 3, 3, 3, 3, 4, 3,
	4, 3, 5, 3, 5, 3, 5, 3, 6, 3, 6, 3, 7, 3, 7, 3, 8, 3, 8, 3, 9, 3, 9, 3,
	10, 3, 10, 3, 11, 3, 11, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12,
	3, 13, 3, 13, 7, 13, 72, 10, 13, 12, 13, 14, 13, 75, 11, 13, 3, 13, 3,
	13, 3, 13, 7, 13, 80, 10, 13, 12, 13, 14, 13, 83, 11, 13, 3, 13, 3, 13,
	3, 13, 7, 13, 88, 10, 13, 12, 13, 14, 13, 91, 11, 13, 3, 13, 5, 13, 94,
	10, 13, 3, 14, 6, 14, 97, 10, 14, 13, 14, 14, 14, 98, 3, 14, 3, 14, 6,
	14, 103, 10, 14, 13, 14, 14, 14, 104, 5, 14, 107, 10, 14, 3, 15, 3, 15,
	3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3,
	15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 5, 15, 127, 10, 15, 3, 16, 6, 16,
	130, 10, 16, 13, 16, 14, 16, 131, 3, 17, 3, 17, 7, 17, 136, 10, 17, 12,
	17, 14, 17, 139, 11, 17, 3, 17, 3, 17, 3, 17, 3, 17, 3, 18, 3, 18, 3, 18,
	5, 18, 148, 10, 18, 3, 18, 3, 18, 3, 19, 3, 19, 3, 19, 5, 19, 155, 10,
	19, 3, 19, 3, 19, 3, 20, 3, 20, 3, 20, 3, 20, 5, 73, 81, 89, 2, 21, 3,
	3, 5, 4, 7, 5, 9, 6, 11, 7, 13, 8, 15, 9, 17, 10, 19, 11, 21, 12, 23, 13,
	25, 14, 27, 15, 29, 16, 31, 17, 33, 18, 35, 19, 37, 20, 39, 21, 3, 2, 5,
	3, 2, 50, 59, 7, 2, 47, 60, 67, 92, 94, 94, 97, 97, 99, 124, 4, 2, 12,
	12, 15, 15, 2, 176, 2, 3, 3, 2, 2, 2, 2, 5, 3, 2, 2, 2, 2, 7, 3, 2, 2,
	2, 2, 9, 3, 2, 2, 2, 2, 11, 3, 2, 2, 2, 2, 13, 3, 2, 2, 2, 2, 15, 3, 2,
	2, 2, 2, 17, 3, 2, 2, 2, 2, 19, 3, 2, 2, 2, 2, 21, 3, 2, 2, 2, 2, 23, 3,
	2, 2, 2, 2, 25, 3, 2, 2, 2, 2, 27, 3, 2, 2, 2, 2, 29, 3, 2, 2, 2, 2, 31,
	3, 2, 2, 2, 2, 33, 3, 2, 2, 2, 2, 35, 3, 2, 2, 2, 2, 37, 3, 2, 2, 2, 2,
	39, 3, 2, 2, 2, 3, 41, 3, 2, 2, 2, 5, 43, 3, 2, 2, 2, 7, 45, 3, 2, 2, 2,
	9, 47, 3, 2, 2, 2, 11, 50, 3, 2, 2, 2, 13, 52, 3, 2, 2, 2, 15, 54, 3, 2,
	2, 2, 17, 56, 3, 2, 2, 2, 19, 58, 3, 2, 2, 2, 21, 60, 3, 2, 2, 2, 23, 62,
	3, 2, 2, 2, 25, 93, 3, 2, 2, 2, 27, 96, 3, 2, 2, 2, 29, 126, 3, 2, 2, 2,
	31, 129, 3, 2, 2, 2, 33, 133, 3, 2, 2, 2, 35, 147, 3, 2, 2, 2, 37, 154,
	3, 2, 2, 2, 39, 158, 3, 2, 2, 2, 41, 42, 7, 125, 2, 2, 42, 4, 3, 2, 2,
	2, 43, 44, 7, 127, 2, 2, 44, 6, 3, 2, 2, 2, 45, 46, 7, 61, 2, 2, 46, 8,
	3, 2, 2, 2, 47, 48, 7, 47, 2, 2, 48, 49, 7, 64, 2, 2, 49, 10, 3, 2, 2,
	2, 50, 51, 7, 42, 2, 2, 51, 12, 3, 2, 2, 2, 52, 53, 7, 43, 2, 2, 53, 14,
	3, 2, 2, 2, 54, 55, 7, 63, 2, 2, 55, 16, 3, 2, 2, 2, 56, 57, 7, 46, 2,
	2, 57, 18, 3, 2, 2, 2, 58, 59, 7, 93, 2, 2, 59, 20, 3, 2, 2, 2, 60, 61,
	7, 95, 2, 2, 61, 22, 3, 2, 2, 2, 62, 63, 7, 121, 2, 2, 63, 64, 7, 107,
	2, 2, 64, 65, 7, 112, 2, 2, 65, 66, 7, 102, 2, 2, 66, 67, 7, 113, 2, 2,
	67, 68, 7, 121, 2, 2, 68, 24, 3, 2, 2, 2, 69, 73, 7, 36, 2, 2, 70, 72,
	11, 2, 2, 2, 71, 70, 3, 2, 2, 2, 72, 75, 3, 2, 2, 2, 73, 74, 3, 2, 2, 2,
	73, 71, 3, 2, 2, 2, 74, 76, 3, 2, 2, 2, 75, 73, 3, 2, 2, 2, 76, 94, 7,
	36, 2, 2, 77, 81, 7, 41, 2, 2, 78, 80, 11, 2, 2, 2, 79, 78, 3, 2, 2, 2,
	80, 83, 3, 2, 2, 2, 81, 82, 3, 2, 2, 2, 81, 79, 3, 2, 2, 2, 82, 84, 3,
	2, 2, 2, 83, 81, 3, 2, 2, 2, 84, 94, 7, 41, 2, 2, 85, 89, 7, 98, 2, 2,
	86, 88, 11, 2, 2, 2, 87, 86, 3, 2, 2, 2, 88, 91, 3, 2, 2, 2, 89, 90, 3,
	2, 2, 2, 89, 87, 3, 2, 2, 2, 90, 92, 3, 2, 2, 2, 91, 89, 3, 2, 2, 2, 92,
	94, 7, 98, 2, 2, 93, 69, 3, 2, 2, 2, 93, 77, 3, 2, 2, 2, 93, 85, 3, 2,
	2, 2, 94, 26, 3, 2, 2, 2, 95, 97, 9, 2, 2, 2, 96, 95, 3, 2, 2, 2, 97, 98,
	3, 2, 2, 2, 98, 96, 3, 2, 2, 2, 98, 99, 3, 2, 2, 2, 99, 106, 3, 2, 2, 2,
	100, 102, 7, 48, 2, 2, 101, 103, 9, 2, 2, 2, 102, 101, 3, 2, 2, 2, 103,
	104, 3, 2, 2, 2, 104, 102, 3, 2, 2, 2, 104, 105, 3, 2, 2, 2, 105, 107,
	3, 2, 2, 2, 106, 100, 3, 2, 2, 2, 106, 107, 3, 2, 2, 2, 107, 28, 3, 2,
	2, 2, 108, 109, 7, 118, 2, 2, 109, 110, 7, 116, 2, 2, 110, 111, 7, 119,
	2, 2, 111, 127, 7, 103, 2, 2, 112, 113, 7, 86, 2, 2, 113, 114, 7, 116,
	2, 2, 114, 115, 7, 119, 2, 2, 115, 127, 7, 103, 2, 2, 116, 117, 7, 104,
	2, 2, 117, 118, 7, 99, 2, 2, 118, 119, 7, 110, 2, 2, 119, 120, 7, 117,
	2, 2, 120, 127, 7, 103, 2, 2, 121, 122, 7, 72, 2, 2, 122, 123, 7, 99, 2,
	2, 123, 124, 7, 110, 2, 2, 124, 125, 7, 117, 2, 2, 125, 127, 7, 103, 2,
	2, 126, 108, 3, 2, 2, 2, 126, 112, 3, 2, 2, 2, 126, 116, 3, 2, 2, 2, 126,
	121, 3, 2, 2, 2, 127, 30, 3, 2, 2, 2, 128, 130, 9, 3, 2, 2, 129, 128, 3,
	2, 2, 2, 130, 131, 3, 2, 2, 2, 131, 129, 3, 2, 2, 2, 131, 132, 3, 2, 2,
	2, 132, 32, 3, 2, 2, 2, 133, 137, 7, 37, 2, 2, 134, 136, 10, 4, 2, 2, 135,
	134, 3, 2, 2, 2, 136, 139, 3, 2, 2, 2, 137, 135, 3, 2, 2, 2, 137, 138,
	3, 2, 2, 2, 138, 140, 3, 2, 2, 2, 139, 137, 3, 2, 2, 2, 140, 141, 5, 35,
	18, 2, 141, 142, 3, 2, 2, 2, 142, 143, 8, 17, 2, 2, 143, 34, 3, 2, 2, 2,
	144, 148, 9, 4, 2, 2, 145, 146, 7, 15, 2, 2, 146, 148, 7, 12, 2, 2, 147,
	144, 3, 2, 2, 2, 147, 145, 3, 2, 2, 2, 148, 149, 3, 2, 2, 2, 149, 150,
	8, 18, 2, 2, 150, 36, 3, 2, 2, 2, 151, 155, 7, 34, 2, 2, 152, 153, 7, 94,
	2, 2, 153, 155, 7, 117, 2, 2, 154, 151, 3, 2, 2, 2, 154, 152, 3, 2, 2,
	2, 155, 156, 3, 2, 2, 2, 156, 157, 8, 19, 2, 2, 157, 38, 3, 2, 2, 2, 158,
	159, 7, 11, 2, 2, 159, 160, 3, 2, 2, 2, 160, 161, 8, 20, 2, 2, 161, 40,
	3, 2, 2, 2, 15, 2, 73, 81, 89, 93, 98, 104, 106, 126, 131, 137, 147, 154,
	3, 8, 2, 2,
}

var lexerDeserializer = antlr.NewATNDeserializer(nil)
var lexerAtn = lexerDeserializer.DeserializeFromUInt16(serializedLexerAtn)

var lexerChannelNames = []string{
	"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
}

var lexerModeNames = []string{
	"DEFAULT_MODE",
}

var lexerLiteralNames = []string{
	"", "'{'", "'}'", "';'", "'->'", "'('", "')'", "'='", "','", "'['", "']'",
	"'window'", "", "", "", "", "", "", "", "'\t'",
}

var lexerSymbolicNames = []string{
	"", "OPEN", "CLOSE", "EOP", "NEXT", "OPEN_PARAMS", "CLOSE_PARAMS", "EQ",
	"SEP", "OPEN_HINTS", "CLOSE_HINTS", "WINDOW", "STRING", "NUMBER", "BOOL",
	"IDENTIFIER", "COMMENT", "NEWLINE", "WHITESPACE", "TAB",
}

var lexerRuleNames = []string{
	"OPEN", "CLOSE", "EOP", "NEXT", "OPEN_PARAMS", "CLOSE_PARAMS", "EQ", "SEP",
	"OPEN_HINTS", "CLOSE_HINTS", "WINDOW", "STRING", "NUMBER", "BOOL", "IDENTIFIER",
	"COMMENT", "NEWLINE", "WHITESPACE", "TAB",
}

type BitflowLexer struct {
	*antlr.BaseLexer
	channelNames []string
	modeNames    []string
	// TODO: EOF string
}

var lexerDecisionToDFA = make([]*antlr.DFA, len(lexerAtn.DecisionToState))

func init() {
	for index, ds := range lexerAtn.DecisionToState {
		lexerDecisionToDFA[index] = antlr.NewDFA(ds, index)
	}
}

func NewBitflowLexer(input antlr.CharStream) *BitflowLexer {

	l := new(BitflowLexer)

	l.BaseLexer = antlr.NewBaseLexer(input)
	l.Interpreter = antlr.NewLexerATNSimulator(l, lexerAtn, lexerDecisionToDFA, antlr.NewPredictionContextCache())

	l.channelNames = lexerChannelNames
	l.modeNames = lexerModeNames
	l.RuleNames = lexerRuleNames
	l.LiteralNames = lexerLiteralNames
	l.SymbolicNames = lexerSymbolicNames
	l.GrammarFileName = "Bitflow.g4"
	// TODO: l.EOF = antlr.TokenEOF

	return l
}

// BitflowLexer tokens.
const (
	BitflowLexerOPEN         = 1
	BitflowLexerCLOSE        = 2
	BitflowLexerEOP          = 3
	BitflowLexerNEXT         = 4
	BitflowLexerOPEN_PARAMS  = 5
	BitflowLexerCLOSE_PARAMS = 6
	BitflowLexerEQ           = 7
	BitflowLexerSEP          = 8
	BitflowLexerOPEN_HINTS   = 9
	BitflowLexerCLOSE_HINTS  = 10
	BitflowLexerWINDOW       = 11
	BitflowLexerSTRING       = 12
	BitflowLexerNUMBER       = 13
	BitflowLexerBOOL         = 14
	BitflowLexerIDENTIFIER   = 15
	BitflowLexerCOMMENT      = 16
	BitflowLexerNEWLINE      = 17
	BitflowLexerWHITESPACE   = 18
	BitflowLexerTAB          = 19
)
