// Code generated by "esc -o static_files_generated.go -pkg plotHttp -prefix static/ static"; DO NOT EDIT.

package plotHttp

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	return nil, nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/index.html": {
		local:   "static/index.html",
		size:    977,
		modtime: 1533829321,
		compressed: `
H4sIAAAAAAAC/6yTsW7cMAyGdz+F4t1inLup0HlJChRdGqDp0KngSYwtR5ZckXZ7b1+4doLiELSHIiN/
k99P0qK5uvt0+/D1/r3qZAhNYa6qiqdxzMSsPsgQvsSnmH7EB8wtiaqqpjBbZkfomsKIl0DNHQqq+5CE
DaxKURi22Y+iONtD2YmM/A7AutiztiFN7jFgJm3TANjjTwj+yJAxujTYFFKGa73X+025XRTdc9kYWLHN
6/wFpduU2kA4ej7D998nyifY6VrXW6AHH98KPHmodX3zwq4mfyne7XrWKbfgdnreX1r1j20OJNlbrtqM
Y+ctw42ur3X9rD/Lr7gVJvj4pDKFQ8lyCsQdkZSqy/T4vzuRjgZi4CEl6SIx/7Ely1w2l5m+4cyLq4Lz
p8qC4i2MIcn5P/hbf1vZ7w/bPIWB7UqOyZ2W2PlZ2YDMh9Kh4DeboqCPlBcb5+clJ6bN7yPO+HltzLNy
nvEYyGkDLxmLw4o2sJ7lrwAAAP//tGMHitEDAAA=
`,
	},

	"/plot.js": {
		local:   "static/plot.js",
		size:    1598,
		modtime: 1533832695,
		compressed: `
H4sIAAAAAAAC/3RUYW/bNhD9TP6KmxdAEuzIcrMBg2wVKJKiKbBiw5ZhH4pCYMWLxIUmDZJy22X+78NR
lit3XoDA4t073rt3x+MaA/z68y8P9Z9v7x7uoYKfiuKr8f712zf3D1DBzWh99cfvr++ggkehPXL+2Jsm
KGug30kRsBZa11sMTjU+zeCZM3mT/+WtSWdLKYKYLWCMSIXW7wZkBLKrHEXTTcwTrBFbXADdMGDZMd2Q
qibHFMMZO2Sc/g//pfg/MfDMAQCoyJ224U4EARW8/8BHYoSaUFIL2AudEZsR/159gAqeQRmJn0sYED2W
9AOHyIctl5AQjaQ0+AnuRMA0eVGsfrhera6LVZLxE4sgXIsBKmgx1MOhlmofOWecvXuTE6O6dWLXqSYl
IkEFjSXEqjhj5C9P1ZDlk5KhKycNJ2OHqu1COe04mYeU5ZEHWRqrrSvBCSPt9pYO6bPut8pYr8KXkgpz
T8khI+znWjQNek8BSRQkIfOXqTmqE81amSeUJQTXE/NvGueDU6a9F75Lh1kheTrhO6igWJDOTecWoNGs
OVOPkPpco2lDB1VVQZGBw9A7E0PWnD1aB6kaYjUaqGDEr0HBJt4Daj4fRq3pHEDENJ1wt1biq5CqbE3C
EQWoIE3j12YDP2ZwHdNkMCdSJ9Q/FRRrWC7h1po9ugDBws2LjyqAMgFbdJwdODvjOVXg0ghMBvaoxUSn
YUhGv5JQwayOM1/XM5jHiJPboyb/9+RQcpDwKvWos290HDKOYY2VCBUkG6n2oGQ1S2I8zCGZQaOF99Us
ZqQJnL3cLKXav0zopafJMLuNNUEogy7JcrHboZEpXZqteUQRA85Y7tCrv8VHjXHImdDe/kYmLGGWf81A
g8Rap2QJq6KIJ3eEnV4t7tGEBfRqWsz4d77yepVTcD48j8vgcWmO2Pi+KPFhcdxBLG+0ap7SYNtWY70T
vaf6Jt32qM96PUUOO/S0dL8bvs7g2tpdfbbajpuXungMyC6uZ848hge1RduH9MI1C5KxiE/x6pI/4/8G
AAD//6jFLDg+BgAA
`,
	},

	"/style.css": {
		local:   "static/style.css",
		size:    230,
		modtime: 1533829268,
		compressed: `
H4sIAAAAAAAC/2zPQaqDMBDG8XXmFANu3oNG2qKbuPcaZWKiDaZOiBFDS+9epKWbyn/5Gxg+KA0lunQ8
JXKTjfgA0XumpNDbPjXwhM9J8Jx+FISmbhwiL5NRWPT1VgNCczQ2KjyFjDN7Z7Bo2/YLMpJxy6ywDrkB
IW98l/uyWj26tI+as5yvZHh9PzqHjFXIGAdNf8fDVln9bxNeAQAA//+vhpqx5gAAAA==
`,
	},

	"/": {
		isDir: true,
		local: "static",
	},
}
